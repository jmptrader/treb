
// legacy

@import './grid.scss';
@import './theme-defaults.scss';
@import './dark-theme.scss';

// not scoped to treb-layout, but has its own scope; also, 
// no imports & relatively clean

@import 'treb-charts/style/charts.scss';

// relatively clean, also no imports

@import './dialog.scss';
@import './spinner.scss';

// local, new (or scrubbed)

@import './treb-icons.scss';
@import './toolbar.scss';

.treb-layout {

  /*============================================================================
   *
   * Reset
   * 
   * Since we cannot use a shadow DOM, we're using this reset to start from
   * a blank-ish slate. Using `revert` should reset styles back to the browser
   * stylesheet (or user stylesheet, if anyone actually does that).
   *
   * Per MDN, "revert is just a value" -- so it can still be overridden by
   * specificity. So it is possible for styles to leak in. We're encapsulating
   * everything so there's not a lot of concern about leaking out. Once we are 
   * three-four levels deep in specificity we probably don't need to worry too 
   * much above stuff leaking in, so the first couple of layers should use 
   * prefixed names just to be sure, and wrap up all the styles.
   * 
   * Known issues (WIP)
   * 
   * this reset breaks contenteditable on chrome, because it unsets the 
   * css property "-webkit-user-modify", which should be "read-write".
   *
   * that's a nonstandard property which is no longer in use (?) but gets
   * set by the contenteditable attribute. chrome/webkit is probably using 
   * this internally to manage editability.
   *
   * it seems like the attribute should take priority over our reset. not sure 
   * why it does not. in any event the fix _seems_ to be setting that property 
   * on contenteditable elements. I say _seems_ because it is working, but we 
   * should keep an eye out for stability issues. 
   * 
   * [update] firefox has the same issue, same fix but with a -moz prefix.
   * weird how that works.
   *
   *===========================================================================*/

  all: revert;
  box-sizing: border-box;

  div, button, input, ul, ol, li, a, textarea {

    // maybe this is being too aggressive. we could be a little 
    // more specific about what we unset in order to avoid any 
    // unexpected side effects.

    all: revert;
    box-sizing: border-box;

  }

  /**
   * this is kind of a global property but we don't actually want
   * to inherit from the page, so we should set a font explicitly
   * here (in fact that should be the treb UI font).
   */
  button, input {
    font: inherit;
    color: inherit;
  }

  * {
    box-sizing: border-box;
  }

  /**
   * fix for chrome (webkit?) and also firefox
   */
  [contenteditable] {
    -webkit-user-modify: read-write;
    -moz-user-modify: read-write;
  }

  // ---------------------------------------------------------------------------

  color-scheme: var(--treb-color-scheme, unset);

  font-family: $font-stack;

  font-style: normal;
  font-weight: normal;
  // color: #333;
  color: inherit;
  font-size: 12pt;

  // FIXME: use stack, var
  // font: 14px sans-serif;
  // color: #333;

  height: 100%;
  width: 100%;

  position: relative;
  display: grid;
  grid-template-rows: auto minmax(0, 1fr);
  grid-template-columns: minmax(0, 1fr) auto;
  // gap: 1em;

  &[animate] {
    .treb-layout-header {
      transition: height var(--treb-sidebar-transition, .2s ease), 
                  opacity var(--treb-sidebar-transition, .2s ease);
    }    
  }

  .treb-layout-header {
    grid-row: 1;
    grid-column: 1/3;
    height: 1px;
    opacity: 0;
  }

  /**
   * toolbar is visible when attribute is set
   */
  &[toolbar] {
    .treb-layout-header {
      height: 42px;
      opacity: 1;
    }
  }

  /**
   * dialog is visible when attribute is set. when dialog 
   * is visible, we want to fade all content -- including
   * toolbar, which also uses opacity (above) so we need
   * to out-specify
   */
  &[dialog] {

    & > *, .treb-layout-header {
      opacity: .6;
    }

    .treb-dialog-mask {
      pointer-events: auto;
      opacity: 1;
    }

  }

  .treb-layout-spreadsheet {

    grid-row: 2;
    grid-column: 1;
    position: relative;
    z-index: 5;
    display: flex;
    flex-direction: row;
    gap: 1em;
    transition: opacity .2s ease;

    // why was this here?
    // overflow: hidden;

    // FIXME: move up (or not needed?)
    // line-height: normal;
    // text-align: left;
  
  }

  .treb-view {

    position: relative;
    display: grid;
    grid-template-columns: minmax(0, 1fr);
    grid-template-rows: auto minmax(0, 1fr) auto;
    flex: 1 1 0px;

    // why was this here?
    // overflow: hidden;

    .treb-spreadsheet-backdrop {
      grid-row: 2;
      grid-column: 1;
      z-index: 2;
      box-shadow: 0 4px 6px -4px rgba(0, 0, 0, .4);
    }

    .treb-spreadsheet-body {
      z-index: 4;
    }

    .treb-spreadsheet-footer {
      z-index: 3;
    }

    .treb-layout-resize-handle {
      display: none;
    }

    &:last-of-type {

      .treb-layout-resize-handle {
        
        display: block;
        grid-area: 2/1/3/2; // overlap the grid body
        justify-self: end;
        align-self: end;

        border: .5rem solid var(--treb-resize-handle-color, blue);
        border-top-color: transparent;
        border-left-color: transparent;

        z-index: 20; // FIXME: use stack

        width: 1rem;
        height: 1rem;

        cursor: nw-resize;

      }
    }

  }

  /*
  .treb-layout-resize-container {
    overflow: hidden;
    position: relative;
    display: flex;
    box-shadow: 0 4px 6px -4px rgba(0, 0, 0, .4);
    flex-grow: 1;
  }
  */

  &[animate] {
    .treb-layout-sidebar {
      transition: width var(--treb-sidebar-transition, .2s ease), 
                opacity var(--treb-sidebar-transition, .2s ease);
    }
  }

  .treb-layout-sidebar {

    grid-row: 2;
    grid-column: 2;

    padding-top: 1em;
    grid-row: 2;
    grid-column: 2;
    display: flex;
    flex-direction: column;
    gap: .75em;
    justify-content: flex-start;
    overflow: hidden;
    width: 2.5rem;

    padding-top: 3em;
    width: 3em;

    align-items: center;

  }

  &[collapsed] {
    .treb-layout-sidebar {
      width: 0px;
      opacity: 0;
    }

    .treb-toggle-sidebar-button {
    
        border-color: var(--treb-toolbar-border-color, var(--treb-ui-border-color, rgb(209, 213, 219)));
        border-right-color: var(--treb-toolbar-button-background, transparent);
        right: 0px;
        border-top-right-radius: 0px;
        border-bottom-right-radius: 0px;
        &::after {
          mask-image: var(--treb-sidebar-icon-chevron-left);
          -webkit-mask-image: var(--treb-sidebar-icon-chevron-left);
        }
        background: var(--treb-toolbar-button-background, #fff);
    
    }
  }

  .treb-layout-sidebar > button, .treb-toggle-sidebar-button {

    all: initial;
    padding: 0;
    margin: 0;
    border: 0;
    background: transparent;

    &::after {
      display: block;
      height: 24px;
      width: 24px;
      content: '';
      background: #ccc; // FIXME
      mask-position: center;
      -webkit-mask-position: center;
      mask-repeat: no-repeat;
      -webkit-mask-repeat: no-repeat;
      transition: background-color 0.1s ease;
      mask-image: var(--treb-mask-image);
      -webkit-mask-image: var(--treb-mask-image);
    }
  
    &:hover::after {
      background: #666;
    }

    &[data-command=recalculate] {
      --treb-mask-image: var(--treb-sidebar-icon-reset);
    }

    &[data-command=toggle-toolbar] {
      --treb-mask-image: var(--treb-sidebar-icon-toolbar);
    }

    &[data-command=revert] {
      --treb-mask-image: var(--treb-sidebar-icon-revert);
    }

    &[data-command=export-xlsx] {
      --treb-mask-image: var(--treb-sidebar-icon-export);
    }

    &[data-command=about] {
      --treb-mask-image: var(--treb-sidebar-icon-about);
    }
   
  }

  .treb-toggle-sidebar-button {

    position: absolute;
    right: .5rem;
    bottom: 6rem;
    background: transparent;
    border: 0;
    border: 1px solid transparent;
    height: 24px;
    width: 24px;

    right: calc(1.5rem - 12px);

    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0;
    margin: 0;

    z-index: $z-index-note;

    &::after {
      height: 12px;
      width: 12px;
      mask-image: var(--treb-sidebar-icon-chevron-right);
      -webkit-mask-image: var(--treb-sidebar-icon-chevron-right);
    }

  }

  /*
  .treb-resize-handle {

    // FIXME: use the stack, but (at least firefox) needs a z-index on this
    z-index: 20;

    border: .5rem solid var(--treb-resize-handle-color, blue);
    border-top-color: transparent;
    border-left-color: transparent;
    position: absolute;
    bottom: 0px;
    right: 0px;
    cursor: nw-resize;
  
    // the opacity change is just annoying, don't bother
    / *
    opacity: .35;
    transition: opacity var(--treb-resize-transition, .1s ease-in-out);
    &:hover, &.retain-opacity {
      opacity: 1;
    }
    * /
  
    &.disabled {
      display: none;
    }
  
  }
  */

}

// these are (atm) outside of the container because we want them
// to be able to float over any outside content as well... what's the
// rule with that? something about stacking contexts? of course we're
// always goint to be fighting z-indexes.
//
// ...possible to use a dialog element? TODO: investigate...
//

.treb-resize-rect {
  all: initial;
  z-index: 9998; // ugh
  position: absolute;
  top: 0px;
  left: 0px;
  border: 1px dotted var(--treb-resize-frame-color, blue);
  width: 100%;
  height: 100%;
  display: block;
}

.treb-resize-mask {
  all: initial;
  z-index: 9999; // ugh
  position: fixed;
  top: 0px;
  left: 0px;
  width: 100vw;
  height: 100vh;
}
