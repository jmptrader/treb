
@import 'treb-grid/style/grid-layout.scss';
@import 'treb-grid/style/grid.scss';
@import 'treb-embed/style/icon.scss';
@import 'treb-embed/style/embed.scss';
@import 'treb-charts/style/charts.scss';

@import './treb-utilities.scss';
@import './treb-icons.scss';
@import './toolbar.scss';

.treb-layout {

  /*============================================================================
   *
   * Reset
   * 
   * Since we cannot use a shadow DOM, we're using this reset to start from
   * a blank-ish slate. Using `revert` should reset styles back to the browser
   * stylesheet (or user stylesheet, if anyone actually does that).
   *
   * Per MDN, "revert is just a value" -- so it can still be overridden by
   * specificity. So it is possible for styles to leak in. The best approach
   * to avoiding that is (1) to use element selectors where possible, and
   * (2) to use prefixed class names where not possible. We're encapsulating
   * everything so there's not a lot of concern about leaking out.
   * 
   * Known issues (WIP)
   * 
   * this reset breaks contenteditable on chrome, because it unsets the 
   * css property "-webkit-user-modify", which should be "read-write".
   *
   * that's a nonstandard property which is no longer in use (?) but gets
   * set by the contenteditable attribute. chrome/webkit is probably using 
   * this internally to manage editability.
   *
   * it looks like there might be something similar happening on firefox
   * because we lost the cursor (again -- what do they have against cursors?)
   * needs some investigating.
   *
   * it seems like the attribute should take priority over our reset. not sure 
   * why it does not. in any event the fix _seems_ to be setting that property 
   * on contenteditable elements. I say _seems_ because it is working, but we 
   * should keep an eye out for stability issues. 
   *
   *===========================================================================*/

  all: revert;
  box-sizing: border-box;

  div, button, input, ul, ol, li, a, textarea {

    // maybe this is being too aggressive. we could be a little 
    // more specific about what we unset in order to avoid any 
    // unexpected side effects.

    all: revert;
    box-sizing: border-box;

  }

  /**
   * this is kind of a global property but we don't actually want
   * to inherit from the page, so we should set a font explicitly
   * here (in fact that should be the treb UI font).
   */
  button, input {
    font: inherit;
  }

  * {
    box-sizing: border-box;
  }

  /**
   * fix for chrome (webkit?) 
   */
  [contenteditable] {
    -webkit-user-modify: read-write;
  }

  // ---------------------------------------------------------------------------

  // FIXME: use stack, var
  font: 14px sans-serif;
  color: #333;

  height: 100%;
  width: 100%;

  position: relative;
  display: grid;
  grid-template-rows: auto minmax(0, 1fr);
  grid-template-columns: minmax(0, 1fr) auto;
  // gap: 1em;

  .treb-layout-header {
    grid-row: 1;
    grid-column: 1/3;
    height: 1px;
    opacity: 0;

    &.treb-animated {
      transition: height var(--treb-sidebar-transition, .2s ease), 
                  opacity var(--treb-sidebar-transition, .2s ease);
    }
    
  }

  /**
   * toolbar is visible when attribute is set
   */
  &[toolbar] {
    .treb-layout-header {
      height: 38px;
      opacity: 1;
    }
  }

  /**
   * dialog is visible when attribute is set. when dialog 
   * is visible, we want to fade all content -- including
   * toolbar, which also uses opacity (above) so we need
   * to out-specify
   */
  &[dialog] {

    & > *, .treb-layout-header {
      opacity: .6;
    }

    .treb-dialog-mask {
      pointer-events: auto;
      opacity: 1;
    }

  }

  .treb-layout-spreadsheet {
    grid-row: 2;
    grid-column: 1;
    position: relative;
    z-index: 5;
  }

  .treb-layout-resize-container {
    overflow: hidden;
    position: relative;
    display: flex;
    box-shadow: 0 4px 6px -4px rgba(0, 0, 0, .4);
    flex-grow: 1;
  }

  .treb-layout-sidebar {

    grid-row: 2;
    grid-column: 2;

    padding-top: 1em;
    grid-row: 2;
    grid-column: 2;
    display: flex;
    flex-direction: column;
    gap: .75em;
    justify-content: flex-start;
    overflow: hidden;
    width: 2.5rem;

    padding-top: 3em;
    width: 3em;

    align-items: center;

    &.treb-animated {
      transition: width var(--treb-sidebar-transition, .2s ease), 
                opacity var(--treb-sidebar-transition, .2s ease);
    }

  }

  &[collapsed] {
    .treb-layout-sidebar {
      width: 0px;
      opacity: 0;
    }

    .treb-toggle-sidebar-button {
    
        border-color: #ccc; // FIXME
        border-right-color: #fff; // FIXME
        right: 0px;
        border-top-right-radius: 0px;
        border-bottom-right-radius: 0px;
        &::after {
          mask-image: var(--treb-sidebar-icon-chevron-left);
          -webkit-mask-image: var(--treb-sidebar-icon-chevron-left);
        }
        background: #fff; // FIXME
    
    }
  }

  .treb-layout-sidebar > button, .treb-toggle-sidebar-button {

    all: initial;
    padding: 0;
    margin: 0;
    border: 0;
    background: transparent;

    &::after {
      display: block;
      height: 24px;
      width: 24px;
      content: '';
      background: #ccc; // FIXME
      mask-position: center;
      -webkit-mask-position: center;
      mask-repeat: no-repeat;
      -webkit-mask-repeat: no-repeat;
      transition: background-color 0.1s ease;
      mask-image: var(--treb-mask-image);
      -webkit-mask-image: var(--treb-mask-image);
    }
  
    &:hover::after {
      background: #666;
    }

    &[data-command=recalculate] {
      --treb-mask-image: var(--treb-sidebar-icon-reset);
    }

    &[data-command=toggle-toolbar] {
      --treb-mask-image: var(--treb-sidebar-icon-toolbar);
    }

    &[data-command=revert] {
      --treb-mask-image: var(--treb-sidebar-icon-revert);
    }

    &[data-command=export-xlsx] {
      --treb-mask-image: var(--treb-sidebar-icon-export);
    }

    &[data-command=about] {
      --treb-mask-image: var(--treb-sidebar-icon-about);
    }
   
  }

  .treb-toggle-sidebar-button {

    position: absolute;
    right: .5rem;
    bottom: 6rem;
    background: transparent;
    border: 0;
    border: 1px solid transparent;
    height: 24px;
    width: 24px;

    right: calc(1.5rem - 12px);

    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0;
    margin: 0;

    z-index: 99;

    &::after {
      height: 12px;
      width: 12px;
      mask-image: var(--treb-sidebar-icon-chevron-right);
      -webkit-mask-image: var(--treb-sidebar-icon-chevron-right);
    }

  }

  .treb-resize-handle {

    border: .5rem solid var(--treb-resize-handle-color, blue);
    border-top-color: transparent;
    border-left-color: transparent;
    position: absolute;
    bottom: 0px;
    right: 0px;
    cursor: nw-resize;
  
    // the opacity change is just annoying, don't bother
    /*
    opacity: .35;
    transition: opacity var(--treb-resize-transition, .1s ease-in-out);
    &:hover, &.retain-opacity {
      opacity: 1;
    }
    */
  
    &.disabled {
      display: none;
    }
  
  }

}

// these are (atm) outside of the container because we want them
// to be able to float over any outside content as well... what's the
// rule with that? something about stacking contexts? of course we're
// always goint to be fighting z-indexes.
//
// ...possible to use a dialog element? TODO: investigate...
//

.treb-resize-rect {
  all: initial;
  z-index: 9998; // ugh
  position: absolute;
  top: 0px;
  left: 0px;
  border: 1px dotted var(--treb-resize-frame-color, blue);
  width: 100%;
  height: 100%;
  display: block;
}

.treb-resize-mask {
  all: initial;
  z-index: 9999; // ugh
  position: fixed;
  top: 0px;
  left: 0px;
  width: 100vw;
  height: 100vh;
}
